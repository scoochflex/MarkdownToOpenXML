using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Novacode;

module Program
{
    [PegGrammar(Options = EmitDebugSources, document,
    grammar
    {
        any : char = ['\u0000'..'\uFFFF'];
        number = ['0' .. '9'];
        heading : Node = '*'+ (!('*'/'\n') any)* '*'+;
        docPiece : Node = heading;
        paragraph: Node = (!docPiece any)*;
        document : DocX = (docPiece / paragraph)*;
      //Rules
    }
  )]
  public class Parser
  {
      [Record]
      class Node
      {
          public variant NodeType
          {
              | Heading
              | Paragraph
          }
          public nodeType : NodeType;
          public text: string;
      }
      public mutable filename : string;
      heading(_ : NToken, x: List[char], _ : NToken):Node
      {
          Node(Node.NodeType.Heading(),string.Join("",x));
      }
      any(letter: NToken):char
      {
          GetText(letter)[0]
      }
      paragraph( letters : List[char]):Node
      {
          Node(Node.NodeType.Paragraph(),string.Join("",letters))
      }
      document (pieces:List[Node]):DocX
      {
          def doc = DocX.Create(filename);
          foreach(piece in pieces)
            _ = doc.InsertParagraph(piece.text);
          doc;
      }
    //Handler methods for the rules
  }
    
  
  Main() : void
  {
      def test = System.IO.File.ReadAllText("test.md");
      def parse = Parser();
      parse.filename = "./test.docx";
      def result = parse.Parse(test);
      result.Value.Save();
      WriteLine(result.Value);
    WriteLine("Hi!");
    _ = ReadKey();
  }
}